//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Printer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Demo
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Printer : global::Ice.Object, PrinterOperations_
    {
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Printer_GetNames(string[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Printer_GetNamesByParam(string[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Printer_ClosedWindow();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Printer_ChangeTrack();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Printer_UploadFile(bool ret);
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public interface PrinterPrx : global::Ice.ObjectPrx
    {
        string[] GetNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string[]> GetNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Printer_GetNames> begin_GetNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetNames(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string[] end_GetNames(global::Ice.AsyncResult asyncResult);

        string[] GetNamesByParam(string s, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string[]> GetNamesByParamAsync(string s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Printer_GetNamesByParam> begin_GetNamesByParam(string s, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetNamesByParam(string s, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetNamesByParam(string s, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string[] end_GetNamesByParam(global::Ice.AsyncResult asyncResult);

        void ClosedWindow(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task ClosedWindowAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Printer_ClosedWindow> begin_ClosedWindow(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_ClosedWindow(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_ClosedWindow(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_ClosedWindow(global::Ice.AsyncResult asyncResult);

        void ChangeTrack(string track, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task ChangeTrackAsync(string track, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Printer_ChangeTrack> begin_ChangeTrack(string track, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_ChangeTrack(string track, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_ChangeTrack(string track, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_ChangeTrack(global::Ice.AsyncResult asyncResult);

        bool UploadFile(string name, string file, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> UploadFileAsync(string name, string file, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Printer_UploadFile> begin_UploadFile(string name, string file, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_UploadFile(string name, string file, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_UploadFile(string name, string file, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_UploadFile(global::Ice.AsyncResult asyncResult);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public interface PrinterOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        string[] GetNames(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        string[] GetNamesByParam(string s, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        void ClosedWindow(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        void ChangeTrack(string track, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        bool UploadFile(string name, string file, global::Ice.Current current = null);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public sealed class strTabHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public sealed class byteTabHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    [global::System.Serializable]
    public sealed class PrinterPrxHelper : global::Ice.ObjectPrxHelperBase, PrinterPrx
    {
        public PrinterPrxHelper()
        {
        }

        public PrinterPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string[] GetNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] GetNamesByParam(string s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNamesByParamAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void ClosedWindow(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_ClosedWindowAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void ChangeTrack(string track, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_ChangeTrackAsync(track, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool UploadFile(string name, string file, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_UploadFileAsync(name, file, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string[]> GetNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNamesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_GetNamesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetNames_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_GetNames(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetNames_name = "GetNames";

        private void _iceI_GetNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _GetNames_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = strTabHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> GetNamesByParamAsync(string s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNamesByParamAsync(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_GetNamesByParamAsync(string iceP_s, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetNamesByParam_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_GetNamesByParam(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetNamesByParam_name = "GetNamesByParam";

        private void _iceI_GetNamesByParam(string iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _GetNamesByParam_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_s);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = strTabHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task ClosedWindowAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_ClosedWindowAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_ClosedWindowAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_ClosedWindow(context, synchronous, completed);
            return completed.Task;
        }

        private const string _ClosedWindow_name = "ClosedWindow";

        private void _iceI_ClosedWindow(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _ClosedWindow_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task ChangeTrackAsync(string track, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_ChangeTrackAsync(track, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_ChangeTrackAsync(string iceP_track, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_ChangeTrack(iceP_track, context, synchronous, completed);
            return completed.Task;
        }

        private const string _ChangeTrack_name = "ChangeTrack";

        private void _iceI_ChangeTrack(string iceP_track, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _ChangeTrack_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_track);
                });
        }

        public global::System.Threading.Tasks.Task<bool> UploadFileAsync(string name, string file, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_UploadFileAsync(name, file, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_UploadFileAsync(string iceP_name, string iceP_file, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_UploadFile_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_UploadFile(iceP_name, iceP_file, context, synchronous, completed);
            return completed.Task;
        }

        private const string _UploadFile_name = "UploadFile";

        private void _iceI_UploadFile(string iceP_name, string iceP_file, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _UploadFile_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                    ostr.writeString(iceP_file);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Printer_GetNames> begin_GetNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetNames(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetNames(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetNames(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetNames(context, callback, cookie, false);
        }

        public string[] end_GetNames(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetNames_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Printer_GetNames> begin_GetNames(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetNames_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Printer_GetNames, string[]>(
                (Callback_Printer_GetNames cb, string[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetNames_name, cookie, completedCallback);
            _iceI_GetNames(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Printer_GetNamesByParam> begin_GetNamesByParam(string s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetNamesByParam(s, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetNamesByParam(string s, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetNamesByParam(s, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetNamesByParam(string s, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetNamesByParam(s, context, callback, cookie, false);
        }

        public string[] end_GetNamesByParam(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetNamesByParam_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Printer_GetNamesByParam> begin_GetNamesByParam(string iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetNamesByParam_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Printer_GetNamesByParam, string[]>(
                (Callback_Printer_GetNamesByParam cb, string[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetNamesByParam_name, cookie, completedCallback);
            _iceI_GetNamesByParam(iceP_s, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Printer_ClosedWindow> begin_ClosedWindow(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_ClosedWindow(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_ClosedWindow(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_ClosedWindow(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_ClosedWindow(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_ClosedWindow(context, callback, cookie, false);
        }

        public void end_ClosedWindow(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ClosedWindow_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Printer_ClosedWindow> begin_ClosedWindow(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Printer_ClosedWindow, object>(
                (Callback_Printer_ClosedWindow cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _ClosedWindow_name, cookie, completedCallback);
            _iceI_ClosedWindow(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Printer_ChangeTrack> begin_ChangeTrack(string track, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_ChangeTrack(track, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_ChangeTrack(string track, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_ChangeTrack(track, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_ChangeTrack(string track, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_ChangeTrack(track, context, callback, cookie, false);
        }

        public void end_ChangeTrack(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ChangeTrack_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Printer_ChangeTrack> begin_ChangeTrack(string iceP_track, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Printer_ChangeTrack, object>(
                (Callback_Printer_ChangeTrack cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _ChangeTrack_name, cookie, completedCallback);
            _iceI_ChangeTrack(iceP_track, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Printer_UploadFile> begin_UploadFile(string name, string file, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_UploadFile(name, file, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_UploadFile(string name, string file, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_UploadFile(name, file, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_UploadFile(string name, string file, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_UploadFile(name, file, context, callback, cookie, false);
        }

        public bool end_UploadFile(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _UploadFile_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Printer_UploadFile> begin_UploadFile(string iceP_name, string iceP_file, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_UploadFile_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Printer_UploadFile, bool>(
                (Callback_Printer_UploadFile cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _UploadFile_name, cookie, completedCallback);
            _iceI_UploadFile(iceP_name, iceP_file, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static PrinterPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PrinterPrx r = b as PrinterPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                PrinterPrxHelper h = new PrinterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PrinterPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            PrinterPrx r = b as PrinterPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                PrinterPrxHelper h = new PrinterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PrinterPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    PrinterPrxHelper h = new PrinterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PrinterPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    PrinterPrxHelper h = new PrinterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PrinterPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PrinterPrx r = b as PrinterPrx;
            if(r == null)
            {
                PrinterPrxHelper h = new PrinterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PrinterPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            PrinterPrxHelper h = new PrinterPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::Printer",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, PrinterPrx v)
        {
            ostr.writeProxy(v);
        }

        public static PrinterPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                PrinterPrxHelper result = new PrinterPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public abstract class PrinterDisp_ : global::Ice.ObjectImpl, Printer
    {
        #region Slice operations

        public abstract string[] GetNames(global::Ice.Current current = null);

        public abstract string[] GetNamesByParam(string s, global::Ice.Current current = null);

        public abstract void ClosedWindow(global::Ice.Current current = null);

        public abstract void ChangeTrack(string track, global::Ice.Current current = null);

        public abstract bool UploadFile(string name, string file, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::Printer",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetNames(Printer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetNames(current);
            var ostr = inS.startWriteParams();
            strTabHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetNamesByParam(Printer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_s;
            iceP_s = istr.readString();
            inS.endReadParams();
            var ret = obj.GetNamesByParam(iceP_s, current);
            var ostr = inS.startWriteParams();
            strTabHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_ClosedWindow(Printer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.ClosedWindow(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_ChangeTrack(Printer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_track;
            iceP_track = istr.readString();
            inS.endReadParams();
            obj.ChangeTrack(iceP_track, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_UploadFile(Printer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            string iceP_file;
            iceP_name = istr.readString();
            iceP_file = istr.readString();
            inS.endReadParams();
            var ret = obj.UploadFile(iceP_name, iceP_file, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "ChangeTrack",
            "ClosedWindow",
            "GetNames",
            "GetNamesByParam",
            "UploadFile",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_ChangeTrack(this, inS, current);
                }
                case 1:
                {
                    return iceD_ClosedWindow(this, inS, current);
                }
                case 2:
                {
                    return iceD_GetNames(this, inS, current);
                }
                case 3:
                {
                    return iceD_GetNamesByParam(this, inS, current);
                }
                case 4:
                {
                    return iceD_UploadFile(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
